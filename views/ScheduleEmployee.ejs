<!DOCTYPE html>
    <html>
    <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Schedule Employee</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="/calendar.js.css" type="text/css">
    <script type = "text/javascript" src= "/calendar.js"></script>
</head>
    <body>
        <div class="navbar">
            <div class="logo-container">
                <div class="logoimg">
                    <img src="MinuteToManage.png" alt="Logo">
                </div>
                <div class="logo-text">
                    Minute to Manage
                </div>
            </div>
        
        
            <% if (isAdmin) { %>
                <a href="/manager_dashboard">Dashboard</a>
                <a href="/schedule_employee">Schedule Employee</a>
                <a href="/view_requests">Employee Requests</a>
                <a href="/add_employee">Add Employee</a>
                <a href="/remove_employee">Remove Employee</a>
                <a href="/view_employee">View Employees</a>
                <a href="/logout">Logout</a>
            <% } else { %>
                <!-- Links for non-admin users -->
                <a href="/view_employee">View Employees</a>
                <a href="/view_requests">Employee Requests</a>
                <a href="/logout">Logout</a>
            <% } %>
        </div>


        <!-- Check if organization exists and display accordingly -->
        <% if (organization && organization !== null) { %>
            <h1>Create Schedule for <%= organization %></h1>
        <% } else { %>
            <h1>Create Schedule</h1>
            <p>You are not currently part of an organization.</p>
        <% } %>
        </body>

        <div class="contents">
            <div id="calendar1" data-binding-calendar='{ "views": { "fullMonth": { "showExtraTitleBarButtons": false } } }'></div>
            
        </div>
        <button id = "exportButton">Save Shifts</button>

        <div id="requests-table" class="requests-table">
            <h2>Accepted Requests</h2>
            <!-- Active requests will be displayed here -->
            <table>
                <thead>
                    <tr>
                        <th>Employee</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Request Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (requests.length > 0) { %>
                        <% requests.forEach(function(request) { %>
                            <tr>
                                <td><%= request.employee_name %></td>
                                <!-- formatting for the dates within the requests table -->
                                <td><%= new Date(request.start_date).toLocaleDateString('en-US', { month: 'short', day: '2-digit', year: 'numeric' }) %></td>
                                <td><%= new Date(request.end_date).toLocaleDateString('en-US', { month: 'short', day: '2-digit', year: 'numeric' }) %></td>
                                <td><%= request.request_type %></td>
                                <td><%= request.status %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5">No Accepted Requests.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
        </body>
        
        <script>
            var calendarInstance1 = new calendarJs( "calendar1", {
                exportEventsEnabled: true, 
                manualEditingEnabled: true, 
                views: {
                    fullMonth: {
                        showTimesInEvents: false,
                        minimumDayHeight: 0
                    }
                },
                manualEditingEnabled: true,
                organizerName: "Your Name",
                organizerEmailAddress: "your@email.address",
                visibleDays: [ 0, 1, 2, 3, 4, 5, 6 ],
                events: {
                    onEventsExported: function( events ) {
                        console.log( events );
                    }
                }
              
            } );
            var eventData = '<%= eventData%>';
            

            var decodedJsonData = eventData.replace(/&#34;/g, '"');
            calData = JSON.parse(decodedJsonData);

            console.log(calData);
            calendarInstance1.setEventsFromJson(decodedJsonData);
        </script>

        <script>
            var eventData;
            document.getElementById('exportButton').addEventListener('click', function() {
            // Call the export function
                
                events = calendarInstance1.getEvents();
                console.log(events)
            
                if(events){
                    fetch('/schedule_employee', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'  // Tells the server that the body is plain text
                        },
                        body: JSON.stringify(events)  // Directly send the string, no need to stringify
                    })
                    .then(response => response.json())  // Parse JSON from the response
                    .then(data => {
            console.log("Received data:", data);  // Check what data you're receiving
            if (data.conflicts && data.conflicts.length > 0) {
                // If there are conflicts, display the conflict message
                displayConflictMessage(data.conflicts);
            } else {
                // If no conflict, show a success message
                alert(data.message || 'Events successfully saved.');
            }
        })
                    .catch(error => {
                    console.error('Error saving event:', error);
                    alert('There was an error saving the event.');
                    });
                }
            });
            function displayConflictMessage(conflicts) {
                let message = "There are conflicts with the following events:\n\n";
                conflicts.forEach(conflict => {
                    // Check if conflict.conflictWith exists and has at least one element
                    if (conflict.conflictWith && conflict.conflictWith.length > 0) {
                        message += `Event: ${conflict.event.title} conflicts with time-off request from ${conflict.conflictWith[0].start_date} to ${conflict.conflictWith[0].end_date}.\n`;
                    } else {
                        message += `Event: ${conflict.event.title} has an unknown conflict.\n`;
                    }
                });
                alert(message);  // Show the conflicts to the user
            }
        </script>
        </html>
